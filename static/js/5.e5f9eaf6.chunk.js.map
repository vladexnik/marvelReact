{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/service.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/skeleton/Skeleton.js","utils/setContent.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/charForm/CharForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","src","error","style","display","width","height","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","setError","_useState5","_useState6","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getComic","_ref3","_callee3","_context3","_transformComics","_x2","getAllComics","_ref4","_callee4","_args4","_context4","getCharacterByName","_ref5","_callee5","name","character","_context5","_x3","comics","_comics$textObjects$","pageCount","title","description","price","prices","thumbnail","path","extension","homepage","urls","language","textObjects","slice","wiki","items","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","key","value","errorInfo","this","setState","console","log","children","props","Component","Skeleton","_jsxs","_Fragment","className","setContent","Spinner","View","imgStyle","alt","href","RandomChar","person","setPerson","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharacterSelected","onKeyDown","e","TransitionGroup","component","renderItems","disabled","CharInfo","char","setChar","characterId","CharForm","criticalError","result","Link","to","Formik","initialValues","charName","validationSchema","Yup","min","required","onSubmit","Form","htmlFor","Field","type","MainPage","selectedCharacter","setCharacter","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.e5f9eaf6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from './error.gif';\n\nconst ErrorMessage=()=>{\n    return(\n        <img src={error} style={ {display: 'block', width: '250px', height:'250px', margin: '0 auto'} } />\n    )\n} \n// from public\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\n\n\nconst useMarvelService=()=> {\n\n    const {loading,request,error,clearError, process,setProcess}=useHttp();\n    const _apiBase='https://gateway.marvel.com:443/v1/public/';\n    const _apiKey='apikey=ee08e659fe8dbd136caf78ed92338ca2'    \n    const _baseOffset='291';\n\n\n        // request  вместо getResource \n        const getAllCharacters=async (offset=_baseOffset)=>{\n            const res=await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n            return res.data.results.map(_transformCharacter);\n        }\n       \n        const getCharacter= async (id)=>{\n            const res=await request(`${_apiBase}characters/${id}?${_apiKey}`);\n            \n            return _transformCharacter(res.data.results[0]);\n        }\n\n        const getComic = async (id) => {\n            const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        \n            return _transformComics(res.data.results[0]);\n        };\n\n        const getAllComics=async (offset='33')=>{\n            const res=await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n            return res.data.results.map(_transformComics);\n        }\n\n        const getCharacterByName=async (name)=>{\n            const res=await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n            let character=(res.data.results.map(_transformCharacter));\n            return character; // [{}]\n        }\n\n       \n\n        const _transformComics=(comics)=>{\n            return {\n                pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No info about number of pages',\n                id: comics.id,\n                title: comics.title,\n                description: comics.description || 'Theres no description',\n                price: comics.prices[0].price ? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n                thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n                homepage: comics.urls[0].url,\n                language: comics.textObjects[0]?.language || \"en-us\",\n            }\n        }\n\n        // const getCharacterApi=()=>{\n        //     return request('https://gateway.marvel.com:443/v1/public/characters?limit=9&offset=291&apikey=ee08e659fe8dbd136caf78ed92338ca2')\n        // }\n\n        const _transformCharacter=(character)=>{\n            \n            if(character.description===''){\n                character.description='This person has no description';\n            }\n            if(character.description.length>200){\n                character.description=character.description.slice(0,210)+'...';\n            }\n            return {\n                id: character.id,\n                name:character.name,\n                description: character.description,\n                thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\n                homepage: character.urls[0].url,\n                wiki: character.urls[1].url,\n                comics: character.comics.items           \n            }     \n        }\n\n        return {\n            loading, error, clearError, process,setProcess, \n            getAllCharacters, getCharacter, getAllComics, \n            getComic,getCharacterByName\n        }\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp=()=>{\r\n    const [loading, setLoading]=useState(false);\r\n    const [error,setError]=useState(null);\r\n    const [process,setProcess]=useState('waiting');\r\n\r\n    const request = useCallback(async (url,\r\n        method='GET',\r\n        body=null, \r\n        headers={'Content-Type': 'application/json'})=>{\r\n            \r\n            setLoading(true);\r\n            setProcess('loading');\r\n            \r\n\r\n            try{\r\n                const response=await fetch(url, {method, body, headers});\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n\r\n                const data=await response.json();\r\n                setLoading(false);\r\n                // setProcess('confirmed'); ошибка, тк опреация асинхр\r\n                return data;\r\n\r\n            } catch(e){\r\n                setLoading(false);\r\n                setError(e.message);\r\n                setProcess('error');\r\n                throw e;\r\n            }\r\n\r\n        },[]);\r\n\r\n        const clearError=useCallback(()=>{\r\n            setError(null);\r\n            setProcess('loading');\r\n        },[]);\r\n        return { loading, request, error,clearError, process,setProcess} \r\n\r\n}","import { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error){\r\n    //     return {\r\n    //         error: true\r\n    //     } \r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        this.setState({\r\n            error: true\r\n        })\r\n        console.log(errorInfo)\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){\r\n            return <h2>Somth went wrong </h2>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\n\r\nconst setContent=(process, Component, data)=>{\r\n    switch(process){\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default: \r\n            throw new Error('unexpected process state');\r\n\r\n    }\r\n}\r\n\r\nexport default setContent; ","import { useEffect, useState} from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/service';\nimport  setContent from '../../utils/setContent'\n\nconst RandomChar =()=> {\n   \n\n    const [person,setPerson]=useState({}); // null\n\n\n    const {getCharacter, clearError, process,setProcess}=useMarvelService();\n\n    useEffect(()=>{\n        updateChar();\n        // const timerId=setInterval(updateChar,5000);\n        // return \n        //     clearInterval(timerId);\n        \n    },[])\n\n    const onCharLoaded=(person)=>{\n       \n        setPerson(person);\n    }\n\n    const updateChar=()=>{\n        clearError();\n        const id=Math.floor(Math.random()*(1011400-1011000)+1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(()=> setProcess('confirmed'))\n    }\n\nreturn (\n    <div className=\"randomchar\">\n\n        {setContent(process, View, person)}\n        <div className=\"randomchar__static\">\n            <p className=\"randomchar__title\">\n                Random character for today!<br/>\n                Do you want to get to know him better?\n            </p>\n            <p className=\"randomchar__title\">\n                Or choose another one\n            </p>\n            <button onClick={updateChar} className=\"button button__main\">\n                <div className=\"inner\">try it</div>\n            </button>\n            <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n        </div>\n    </div>\n)\n    \n}\n\nconst View=({data})=>{\n    let imgStyle={ \n        'objectFit': 'cover'\n    };\n    const {name,description, thumbnail,homepage,wiki}=data;\n    if(thumbnail==='http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle={ \n            'objectFit': 'contain' }\n    }\n    return(     \n                <div className=\"randomchar__block\">\n                    <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">\n                           {description}\n                        </p>\n                        <div className=\"randomchar__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\n\nexport default RandomChar;","import './charList.scss';\nimport useMarvelService from '../../services/service';\nimport { useState,useEffect,useRef,useMemo } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport PropTypes from 'prop-types'\nimport { CSSTransition,TransitionGroup } from 'react-transition-group';\n\n\nconst setContent=(process, Component, newItemLoading)=>{\n    switch(process){\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default: \n            throw new Error('unexpected process state');\n\n    }\n}\n\nconst CharList =(props)=>{\n   \n    const [charList, setCharList]=useState([]);\n    const [newItemLoading,setNewItemLoading]=useState(false);\n    const [offset,setOffset]=useState(200);\n    const [charEnded,setCharEnded]=useState(false);\n    const {getAllCharacters, process, setProcess}=useMarvelService();\n\n    // useffect запуск после рендера, после того как функция onRequest существует внутри комп-та\n    useEffect(()=>  {\n        onRequest(offset,true);\n    },[])\n\n//////    \n    const onRequest=(offset,initial)=>{\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(()=> setProcess('confirmed'))\n    }\n    // отвеч за запрос на сервер\n    \n    const onCharListLoaded=(newCharList)=>{\n\n        // const {logger, secondLog}=await import ('./someFunc');\n        // logger();\n\n        let ended=false;\n        if(newCharList.length<9) {\n            ended=true;\n        }\n\n        setCharList(charList=> [...charList, ...newCharList]); // важно что было в предыд charList\n        setNewItemLoading(newItemLoading=> false)\n        setOffset(offset=> offset+9)\n        setCharEnded(charEnded=>ended)\n    } \n    // ({}) - возвр-ем объект из этой функции\n///////\n\n    const itemRefs=useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item,i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={1000} classNames='char__item'>\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el=> itemRefs.current[i]=el}\n                        key={item.id}\n                        onClick={()=>{props.onCharacterSelected(item.id); focusOnItem(i); }}\n                        onKeyDown={(e)=>{\n                            if(e.key===' ' || e.key==='Enter'){\n                                props.onCharacterSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        \n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return(\n            \n                <ul className=\"char__grid\">\n                    <TransitionGroup component={null}>\n                        {items}\n                    </TransitionGroup>\n                </ul>\n            \n        )\n    }   \n\n        const elements=useMemo(()=>{\n            return setContent(process, ()=>renderItems(charList), newItemLoading);\n        }, [process])\n        // чтоб комп-т не перерендеривался(при повторном нажатии на того же перса) и чтоб рез-т работы ф-ии постоянно запоминался и был зависим от опред пар-ра\n\n        return (\n            <div className=\"char__list\">\n                {elements}\n                <button \n                onClick={()=>onRequest(offset)}\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block' }}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nexport default CharList;","import './charInfo.scss';\nimport {useState,useEffect } from 'react';\nimport useMarvelService from '../../services/service';\nimport  setContent from '../../utils/setContent';\nimport PropTypes from 'prop-types';\n\nconst CharInfo=(props)=>{\n\n    const [char,setChar]=useState(null);\n    const { getCharacter, clearError, process, setProcess }=useMarvelService();\n\n    useEffect(()=>{\n        updateChar()\n    },[props.characterId])\n\n\n    const updateChar=()=>{\n        const {characterId}=props;\n            if(!characterId){\n                return;\n            }\n            clearError();\n            getCharacter(characterId)\n                .then(onCharLoaded)\n                .then(()=> setProcess('confirmed'))         \n    }\n\n    const onCharLoaded=(char)=>{\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n   \n}\n\n//ожидание\n//получение заказа\n//доставка\n//получение оплаты\n// finite-state machine\n\nconst View=({data})=>{\n    const {name,description,thumbnail,homepage,wiki,comics}=data;\n\n    let imgStyle={ \n        'objectFit': 'contain'\n    }\n    if(thumbnail==='http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n            imgStyle={ \n            'objectFit': 'contain' }\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}   \n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length> 0 ? null :               \n                    <li className=\"char__comics-item\" >\n                        Sorry. There is no comics with this character. U can create it :|\n                    </li> \n                }\n                \n                {   \n                    comics.map((item, i)=>{\n                        if(i>4) return;\n                        return(                     \n                                <li key={i} className=\"char__comics-item\" >\n                                    {item.name}\n                                </li> \n                            )  \n                        })\n                }  \n            </ul>\n        </>\n    )\n}\n\n// CharInfo.propTypes={\n//     characterId: PropTypes.string.isRequired\n// }\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import './charForm.scss';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport '../../style/button.scss'\r\nimport {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/service';\r\n\r\n\r\nconst CharForm=()=>{\r\n\r\n    const [char,setChar]=useState(null);\r\n    const {loading, error, clearError, getCharacterByName}=useMarvelService();\r\n\r\n    const updateChar=(name)=>{\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded=(char)=>{\r\n        setChar(char);\r\n    }\r\n\r\n    const criticalError= error ? \r\n        <div className=\"char__search-critical-error\">\r\n            <ErrorMessage/>\r\n        </div> : null;\r\n\r\n    const result= !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">\r\n                Found this char. Visit {char[0].name} page!\r\n            </div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> \r\n        :   <div className=\"char__search-wrapper\">  \r\n                <div className=\"char__search-error\">\r\n                    Not found. Try another\r\n                </div>\r\n            </div>;\r\n\r\n    return(\r\n        <div className=\"char__search-form\">\r\n            <Formik \r\n                initialValues= { \r\n                { \r\n                    charName: ''\r\n                }}\r\n\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string()\r\n                                .min(2, \"2 symbols min\")\r\n                                .required('Necessary field')       \r\n                })}\r\n\r\n                // нажим на кнопку\r\n                // отправляемся на сервер брать данные\r\n                // обновляем состояние ф-ей onCharLoaded\r\n                onSubmit= {\r\n                    ({charName})=>{\r\n                        updateChar(charName);\r\n                    }\r\n                }\r\n            >\r\n\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"text\">Find character</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\" \r\n                            name=\"charName\" \r\n                            type=\"text\" \r\n                        />\r\n                        \r\n                        {/* <ErrorMessage className=\"error\" name=\"terms\" component=\"div\"/> */}\r\n                        <button className=\"button button__main\"\r\n                            type='submit' \r\n                            disabled={loading}\r\n                        >\r\n                            <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <ErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {result}\r\n            {criticalError}\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default CharForm;","\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useState } from \"react\";\r\nimport CharForm from \"../charForm/CharForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst MainPage=()=>{\r\n\r\n    const[selectedCharacter, setCharacter]=useState(null);\r\n\r\n    const onCharacterSelected=(id)=>{\r\n       setCharacter(id);\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"char__content\">\r\n                <CharList onCharacterSelected={onCharacterSelected}/>\r\n                <div className=\"bigchar\">\r\n                    <ErrorBoundary>\r\n                        <CharForm/>\r\n                    </ErrorBoundary>\r\n                    \r\n                    <ErrorBoundary>\r\n                        <CharInfo characterId={selectedCharacter}/>\r\n                    </ErrorBoundary>                    \r\n                </div>\r\n            </div>\r\n            <img className =\"bg-decoration\" src={decoration} alt=\"vision\"/>    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage; "],"sourceRoot":""}