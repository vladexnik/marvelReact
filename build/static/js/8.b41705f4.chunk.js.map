{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/service.js","hooks/http.hook.js","components/pages/singleComicPage/SingleComicPage.js"],"names":["ErrorMessage","_jsx","src","error","style","display","width","height","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","setError","_useState5","_useState6","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getComic","_ref3","_callee3","_context3","_transformComics","_x2","getAllComics","_ref4","_callee4","_args4","_context4","getCharacterByName","_ref5","_callee5","name","character","_context5","_x3","comics","_comics$textObjects$","pageCount","title","description","price","prices","thumbnail","path","extension","homepage","urls","language","textObjects","slice","wiki","items","View","comic","navigate","useNavigate","_jsxs","className","children","Helmet","type","content","alt","href","Link","to","onClick","SingleComicPage","comicId","useParams","setComic","_useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMess","spinn","Spinner","_Fragment"],"mappings":"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","file":"static/js/8.b41705f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from './error.gif';\n\nconst ErrorMessage=()=>{\n    return(\n        <img src={error} style={ {display: 'block', width: '250px', height:'250px', margin: '0 auto'} } />\n    )\n} \n// from public\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\n\n\nconst useMarvelService=()=> {\n\n    const {loading,request,error,clearError, process,setProcess}=useHttp();\n    const _apiBase='https://gateway.marvel.com:443/v1/public/';\n    const _apiKey='apikey=ee08e659fe8dbd136caf78ed92338ca2'    \n    const _baseOffset='291';\n\n\n        // request  вместо getResource \n        const getAllCharacters=async (offset=_baseOffset)=>{\n            const res=await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n            return res.data.results.map(_transformCharacter);\n        }\n       \n        const getCharacter= async (id)=>{\n            const res=await request(`${_apiBase}characters/${id}?${_apiKey}`);\n            \n            return _transformCharacter(res.data.results[0]);\n        }\n\n        const getComic = async (id) => {\n            const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        \n            return _transformComics(res.data.results[0]);\n        };\n\n        const getAllComics=async (offset='33')=>{\n            const res=await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n            return res.data.results.map(_transformComics);\n        }\n\n        const getCharacterByName=async (name)=>{\n            const res=await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n            let character=(res.data.results.map(_transformCharacter));\n            return character; // [{}]\n        }\n\n       \n\n        const _transformComics=(comics)=>{\n            return {\n                pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No info about number of pages',\n                id: comics.id,\n                title: comics.title,\n                description: comics.description || 'Theres no description',\n                price: comics.prices[0].price ? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n                thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n                homepage: comics.urls[0].url,\n                language: comics.textObjects[0]?.language || \"en-us\",\n            }\n        }\n\n        // const getCharacterApi=()=>{\n        //     return request('https://gateway.marvel.com:443/v1/public/characters?limit=9&offset=291&apikey=ee08e659fe8dbd136caf78ed92338ca2')\n        // }\n\n        const _transformCharacter=(character)=>{\n            \n            if(character.description===''){\n                character.description='This person has no description';\n            }\n            if(character.description.length>200){\n                character.description=character.description.slice(0,210)+'...';\n            }\n            return {\n                id: character.id,\n                name:character.name,\n                description: character.description,\n                thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\n                homepage: character.urls[0].url,\n                wiki: character.urls[1].url,\n                comics: character.comics.items           \n            }     \n        }\n\n        return {\n            loading, error, clearError, process,setProcess, \n            getAllCharacters, getCharacter, getAllComics, \n            getComic,getCharacterByName\n        }\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp=()=>{\r\n    const [loading, setLoading]=useState(false);\r\n    const [error,setError]=useState(null);\r\n    const [process,setProcess]=useState('waiting');\r\n\r\n    const request = useCallback(async (url,\r\n        method='GET',\r\n        body=null, \r\n        headers={'Content-Type': 'application/json'})=>{\r\n            \r\n            setLoading(true);\r\n            setProcess('loading');\r\n            \r\n\r\n            try{\r\n                const response=await fetch(url, {method, body, headers});\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n\r\n                const data=await response.json();\r\n                setLoading(false);\r\n                // setProcess('confirmed'); ошибка, тк опреация асинхр\r\n                return data;\r\n\r\n            } catch(e){\r\n                setLoading(false);\r\n                setError(e.message);\r\n                setProcess('error');\r\n                throw e;\r\n            }\r\n\r\n        },[]);\r\n\r\n        const clearError=useCallback(()=>{\r\n            setError(null);\r\n            setProcess('loading');\r\n        },[]);\r\n        return { loading, request, error,clearError, process,setProcess} \r\n\r\n}","import { Helmet } from 'react-helmet';\r\n\r\nimport './singleComicPage.scss';\r\nimport {useParams, Link, useNavigate} from \"react-router-dom\";\r\nimport {useState,useEffect } from 'react';\r\nimport useMarvelService from '../../../services/service';\r\nimport Spinner from '../../spinner/Spinner';\r\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\r\n\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId}=useParams();\r\n    const [comic,setComic]=useState(null);\r\n    const {loading,error,getComic, clearError}=useMarvelService();\r\n    \r\n    \r\n    useEffect(()=>{\r\n        updateComic();\r\n    },[comicId])\r\n\r\n    const updateComic=()=>{\r\n            clearError();\r\n            getComic(comicId)\r\n                .then(onComicLoaded)  \r\n    }\r\n\r\n    const onComicLoaded=(comic)=>{\r\n        setComic(comic);\r\n        \r\n    }\r\n    \r\n    const errorMess=error ? <ErrorMessage/> : null;\r\n    const spinn=loading ? <Spinner/> : null;\r\n    const content=!( loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {errorMess}\r\n            {spinn}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View=({comic})=>{\r\n    const {homepage, title, description, pageCount, language, thumbnail,price}=comic;\r\n    const navigate=useNavigate();\r\n    return (\r\n        <div className=\"single-comic\">\r\n\r\n            <Helmet>\r\n                <style type=\"text/css\">{`\r\n                    body {\r\n                        background-color: #fff ;\r\n                    }\r\n                `}</style>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${title} comics book`}\r\n                />\r\n                <title>{title}</title>\r\n            </Helmet >\r\n            <div>\r\n                <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n                <a href={homepage} className=\"button button__main comic\">\r\n                    <div className=\"inner\">homepage</div>\r\n                </a>\r\n            </div>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">{language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n            <button className=\"back\" onClick={() => navigate(-1)}>Go back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}